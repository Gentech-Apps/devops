# This is a basic workflow to help you get started with Actions

name: static-web-S3-deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    tags:
      - 'prod-v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  CI : false
  BROWSER: none
  EXTEND_ESLINT: true
  DOMAIN: https://admin.example.com
  REACT_APP_API_URL: https://api.example.com
  REACT_APP_SOCKET_URL: https://io.example.com
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@v1.0.6
      # From now you can access the version
      - name: Print version
        run: echo ${{ steps.extract_version.outputs.version }}e

      # Runs a single command using the runners shell
      - name: Set up Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: '16.17.0'

      # Install the node modules
      - name: yarn Install
        run: yarn install

        # Create production build
      - name: Production Build
        #run: npm run build -- --prod # This is equivalent to 'ng build --prod'
        run: yarn build
        env:
          REACT_APP_VERSION: ${{ steps.extract_version.outputs.version }}

      # Deploy to S3
      # This is a third party action used to sync our production build app with the AWS S3 bucket
      # For security purpose I am using secrets configured in project repo setting.
      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          # --acl public read => makes files publicly readable(i.e. makes sure that your bucket settings are also set to public)
          # --delete => permanently deletes files in S3 bucket that are not present in latest build
          args: --acl public-read --delete
        env:
          AWS_S3_BUCKET: admin.example.com # S3 bucket name
          # note: use IAM role with limited role for below access-key-id and secret-access-key
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # Access Key ID
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Access Secret Key
          SOURCE_DIR: build/ # build folder
